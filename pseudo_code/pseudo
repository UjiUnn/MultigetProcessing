procedure ProcessQuery(pkt)
- hash : hash function that tells you the server number

    if pkt.op == mget then
        split pkt.key[0] and hash(pkt.key[0]) 
        put hash(pkt.key[0]) into keyset_0[0]
        recirculate the pkt

        split pkt.key[1] and hash(pkt.key[1])
        if hash(pkt.key[1]) == hash(pkt.key[0]) then
            put hash(pkt.key[1]) into keyset_0[1]
        else
            put hash(pkt.key[1]) into keyset_1[0]

        recirculate the pkt
        split pkt.key[2] and hash(pkt.key[2])

        ...

        split pkt.key[n] and hash(pkt.key[n])
        if hash(pkt.key[n]) == hash(pkt.key[0]) then
            put hash(pkt.key[n]) into keyset_0[i]
        else if hash(pkt.key[n]) == hash(pkt.key[1]) then
            ...
        else 
            put hash(pkt.key[n]) into keyset_x[0]
        
        create pkt_0
        pkt_0.key <- pkt.key[0...i]
        send pkt_0 and request pkt_0.value to Server[keyset_0]
        if pkt_0.value arrived then
            put pkt_0.value into valueset
        
        create pkt_1
        pkt_1.key <- pkt.key[0...j]
        send pkt_1 and request pkt_1.value to Server[keyset_1]
        if pkt_1.value arrived then
            put pkt_1.value into valueset

        ...

        create pkt_x
        pkt_x.key <- pkt.key[0...k]
        send pkt_x and request pkt_x.value to Server[keyset_x]
        if pkt_x.value arrived then
            put pkt_x.value into valueset

        create newPkt
        newPkt.value <- valueset

    else
        request pkt.value to Server[hash(pkt.key)] //read(pkt.value)
        if pkt.value arrived then
            create newPkt
            newPkt.value <- pkt.value
        else
            request again
                if pkt.value arrived then
                
                ...

                else
                    create newPkt
                    newpkt.op <- fail

    Forward packet to client

end procedure

// 가정 1. Use hash-partitioned storage 
//     2. 일정 횟수 이하는 서버에 요청하지만 일정 횟수 이상 서버로부터 답신을 못받으면 fail
//     3. mget 패킷을 보낼 때 하나의 패킷에 여러 키가 있다고 가정...(?)



// mget 쿼리가 여러개 들어왔을 때는 어떻게 하는가?? -> 문제는 valueset이 하나 밖에 없음
// 
// 해결해야할 것 1. 스위치에서 read를 보낼 때 -> 클라이언트에서 먼저 해시하여 몇개 가는지 알려줌, 해시값 단위로 정렬
//               패킷을 받으면 정렬된 key1, key2...를 보고 스킵.. 스킵... 카운트를 세서 다 세면 해당 패킷은 미러링 후 뒤는 pkt.key 2...는 잘라서 서버에 보내버림, 그러면 전송 단에서는 패킷 저장할 필요없음
//            2. 서버에 read 할 때, mget쿼리가 여러개 들어오고 도착 순서가 보장 안됨 -> 패킷이 오면 [req.id][MAX]를 저장하는 배열을 만듦
//               해당 req의 마지막 패킷이 도착하면(이때 클라이언트에서 보내준 key 개수와 배열에 저장된 개수 비교) 해당 패킷의 개수 + 배열에 저장된 개수 비교해서 마지막이면 앞서 전송된 value를 패킷에 추가하여 클라이언트에게 전송
//               (순서 뒤바뀜은 어차피 패킷에 k1-v1 , k2-v2...이런식으로 저장되기 때문에 고려x)
//               저장 배열은 스위치 사이즈의 제한 때문에 많이 저장 못함... 평균 8.6개 키를 보내는데 스위치 스테이지는 12 ~ 20개 사이, 저장할 때마다 스테이지 소모임, 원래 스위치가 소모하는 스테이지도 있음
//               그래서 key의 개수가 4개 이하면 mget1으로 처리하고, 5개 이상이면 mget2로 처리하여 키의 개수를 분리할 수도 있음... -> 가정이니까 코디네이터 vs 분리해서 처리하기 어떤 성능이 나은지 추후에...
//              
// 알아야할 것 1. 스위치에서는 패킷만 처리하면 됨, 클라이언트에서 전처리 가능
//          2. 클라이언트 단위가 아니라 쿼리 단위로 해결하기
//          3. 스위치 사용 힌트는 패킷 헤더 필드 형태로 추가 가능
//              스위치는 패킷 단위로 처리됨(i.e., request 패킷과 reply 패킷을 동시에 처리한다던가 line-rate으로 자체적으로 패킷을 생성할 수 없음)
//          4. Request 단계에서는 key를 굳이 저장할 필요가 없다
//          5. Reply 단계에서는 Value를 저장해야한다
//          6. 하나의 메시지는 여러 패킷으로 구성될 수 있으나, Key-value store에서는 1 메시지 = 1 패킷
//          7. UDP 사용 가정 (재전송 없음)
//          8. multiget request가 포함하는 key의 갯수는 많을 수 있으나, 스위치의 제한된 stage 수로 인해 갯수가 제한 될 수 있음
//              -> multiget request 자체를 다시 분할하는 방법?
//          9. 수도코드 다듬고 -> P4로 스위치 프로그래밍 -> 클라이언트/서버 프로그래밍
//              
//              스위치의 stage 소모는 request + reply 둘 다,, 결국 client에서도 어디서 끊어야하는지 인덱스를 같이 보내주기
//              
//              
